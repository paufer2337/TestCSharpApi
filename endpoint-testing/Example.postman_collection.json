{
	"info": {
		"_postman_id": "e403d4d7-c769-488b-ae91-2bfe9f972c0e",
		"name": "Example",
		"description": "VIKTIGT: körs i kronologisk ordning",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34617258"
	},
	"item": [
		{
			"name": "Login as admin",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"thomas@nodehill.com\",\n    \"password\": \"12345678\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Setup all test data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Test data to use, pasted from our json file with test data",
							"let testData = {",
							"  \"counter\": 0,",
							"  \"categories\": [",
							"    {",
							"      \"name\": \"Grönsaker\",",
							"      \"description\": \"Färska grönsaker.\"",
							"    },",
							"    {",
							"      \"name\": \"Frukter\",",
							"      \"description\": \"Färska frukter.\"",
							"    },",
							"    {",
							"      \"name\": \"Rengöringsprodukter\",",
							"      \"description\": \"Allt du behöver för att hålla hemmet rent.\"",
							"    }",
							"  ],",
							"  \"products\": [",
							"     {",
							"      \"name\": \"Gurka\",",
							"      \"description\": \"Krispig, färskt gurka. Ekologiskt odlad i Bjärred.\",",
							"      \"price\": 25,",
							"      \"categoryId\": \"Grönsaker\"",
							"     },",
							"     {",
							"      \"name\": \"Äpple\",",
							"      \"description\": \"Söt, färskt äpple. Ekologiskt odlad i Kivik.\",",
							"      \"price\": 25,",
							"      \"categoryId\": \"Frukter\"",
							"    }",
							"  ],",
							"  \"comments\": [",
							"    {",
							"      \"comment\": \"Sött och krispigt! \",",
							"      \"productId\": \"Äpple\",",
							"      \"userId\": 3",
							"    }",
							"  ]",
							"}",
							"",
							"// Set the test data as a collection variable",
							"// (collection variables are available",
							"//. for all requests in a colleciton)",
							"pm.collectionVariables.set(\"testData\",testData);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Not doing any tests here"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001"
				}
			},
			"response": []
		},
		{
			"name": "Create categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that affected rows equals 1",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {",
							"    pm.expect(responseData.rowsAffected).to.equal(1);",
							"});",
							"",
							"// Test that we get an insert id back",
							"// also add the id in our test data (for future tests)",
							"pm.test(\"We should get an insertId back\", () => {",
							"    pm.expect(responseData.insertId).to.be.a('number');",
							"    // Add the property id to the category with the",
							"    // id recieved from the REST-api",
							"    category.id = responseData.insertId;",
							"    // Log",
							"    console.log(\"The category has been created\", category);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"// (also including the id we set in the second test)",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more categories - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.categories[testData.counter]){",
							"    pm.execution.setNextRequest(\"Create categories\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All categories have been created.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// pm variables have a scope of one request",
							"// setting two variables used in the body",
							"pm.variables.set(\"name\", category.name);",
							"pm.variables.set(\"description\", category.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get categories",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", category.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that the REST-api returns the sama data",
							"// as our test data for the category",
							"pm.test(\"Test that the correct category data is returned\", ()=> {",
							"  console.log(\"category\", category);",
							"  console.log(\"responseData\", responseData);",
							"  pm.expect(category).to.deep.equal(responseData); ",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more categories - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.categories[testData.counter]){",
							"    pm.execution.setNextRequest(\"Get categories\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All categories have been read correctly.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let catagory = testData.categories[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that affected rows equals 1",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {",
							"    pm.expect(responseData.rowsAffected).to.equal(1);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more categories - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.categories[testData.counter]){",
							"    pm.execution.setNextRequest(\"Change categories\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All catagory-decriptions have been changed.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Change the description and save to collectionVariables",
							"category.description += \" Some extra text in the description.\";",
							"pm.collectionVariables.set(\"testData\", testData);",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", category.id); ",
							"",
							"// Set a pm variable to description (it is used in the request body)",
							"pm.variables.set(\"description\", category.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"{{description}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get categories after change",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", category.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that the REST-api returns the sama data",
							"// as our test data for the category",
							"pm.test(\"Test that the correct category data is returned\", ()=> {",
							"  console.log(\"category\", category);",
							"  console.log(\"responseData\", responseData);",
							"  pm.expect(category).to.deep.equal(responseData); ",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more categories - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.categories[testData.counter]){",
							"    pm.execution.setNextRequest(\"Get categories after change\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All categories have been read correctly after the change.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let product = testData.products[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that affected rows equals 1",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {",
							"    pm.expect(responseData.rowsAffected).to.equal(1);",
							"});",
							"",
							"// Test that we get an insert id back",
							"// also add the id in our test data (for future tests)",
							"pm.test(\"We should get an insertId back\", () => {",
							"    pm.expect(responseData.insertId).to.be.a('number');",
							"    // Add the property id to the category with the",
							"    // id recieved from the REST-api",
							"    product.id = responseData.insertId;",
							"    // Log",
							"    console.log(\"The product has been created\", product);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"// (also including the id we set in the second test)",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more products - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.products[testData.counter]){",
							"    pm.execution.setNextRequest(\"Create products\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All products have been created.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}",
							"var template = `",
							"<style type=\"text/css\">",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"</style>",
							"",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>ID</th>",
							"        <th>Name</th>",
							"        <th>Price</th>",
							"        <th>Category</th>",
							"    </tr>",
							"    ",
							"    {{#each response}}",
							"        <tr>",
							"            <td>{{id}}</td>",
							"            <td>{{name}}</td>",
							"            <td>{{price}}</td>",
							"            <td>{{category}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"`;",
							"",
							"function constructVisualizerPayload() {",
							"    return { response: pm.response.json() }",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"",
							"// Get the current products",
							"let product = testData.products[testData.counter];",
							"",
							"// Replace the category name in the property categoryId",
							"// with actual id of the category",
							"",
							"// Find the correct category",
							"let categoryWithMatchingName = testData.categories.find(category => {",
							"    return category.name == product.categoryId",
							"});",
							"// Change the categoryId property of the product",
							"// to the id of the matching category",
							"product.categoryId = categoryWithMatchingName.id;",
							"",
							"// Save changes to our test data (the new value of categoryId)",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"",
							"// pm variables have a scope of one request",
							"// setting four variables used in the body",
							"pm.variables.set(\"name\", product.name);",
							"pm.variables.set(\"description\", product.description);",
							"pm.variables.set(\"price\", product.price);",
							"pm.variables.set(\"categoryId\", product.categoryId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": {{price}},\n    \"categoryId\": {{categoryId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/products",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> \r",
							"{\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the product\r",
							"pm.test(\"Test that the correct product data is returned\", ()=> \r",
							"{\r",
							"  console.log(\"product\", product);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(product).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.products[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get products\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All products have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Change the description and save to collectionVariables\r",
							"product.description += \"TEST.\";\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); \r",
							"\r",
							"// Set a pm variable to description (it is used in the request body)\r",
							"pm.variables.set(\"description\", product.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that affected rows equals 1\r",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {\r",
							"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.products[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Change products\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All product-decriptions have been changed.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\": \"{{description}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products after change",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the product\r",
							"pm.test(\"Test that the correct category data is returned\", ()=> {\r",
							"  console.log(\"product\", product);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(product).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.products[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get products after change\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All products have been read correctly after the change.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comments",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"\r",
							"// Get the current comment\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Replace the category name in the property categoryId\r",
							"// with actual id of the category\r",
							"\r",
							"// Find the correct category\r",
							"let productWithMatchingName = testData.products.find(product => {\r",
							"    return product.name == commentList.productId\r",
							"});\r",
							"// Change the categoryId property of the product\r",
							"// to the id of the matching category\r",
							"commentList.productId = productWithMatchingName.id;\r",
							"\r",
							"// Save changes to our test data (the new value of categoryId)\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// pm variables have a scope of one request\r",
							"// setting four variables used in the body\r",
							"pm.variables.set(\"comment\", commentList.comment);\r",
							"pm.variables.set(\"userId\", commentList.userId);\r",
							"pm.variables.set(\"productId\", commentList.productId);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that affected rows equals 1\r",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {\r",
							"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
							"});\r",
							"\r",
							"// Test that we get an insert id back\r",
							"// also add the id in our test data (for future tests)\r",
							"pm.test(\"We should get an insertId back\", () => {\r",
							"    pm.expect(responseData.insertId).to.be.a('number');\r",
							"    // Add the property id to the category with the\r",
							"    // id recieved from the REST-api\r",
							"    commentList.id = responseData.insertId;\r",
							"    // Log\r",
							"    console.log(\"The comment has been created\", commentList);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"// (also including the id we set in the second test)\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.comments[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Create comments\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All comments have been created.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"comment\": \"{{comment}}\",\r\n    \"userId\": {{userId}},\r\n    \"productId\": {{productId}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", commentList.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the product\r",
							"pm.test(\"Test that the correct comment data is returned\", ()=> {\r",
							"  console.log(\"comment\", commentList);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(commentList).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.comments[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get commentList\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All comments have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change comments",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"commentList.comment += \"TEST.\";\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"pm.variables.set(\"id\", commentList.id); \r",
							"pm.variables.set(\"comment\", commentList.comment);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"let response = pm.response;\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> \r",
							"{\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Expect rowsAffected to equal 1\", () => \r",
							"{\r",
							"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
							"});\r",
							"\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"if(testData.comments[testData.counter])\r",
							"{\r",
							"    pm.execution.setNextRequest(\"Change comments\");\r",
							"}\r",
							"else \r",
							"{\r",
							"    console.log(\"All comment-comment have been changed.\");\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"comment\": \"{{comment}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments after change",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"pm.variables.set(\"id\", comment.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"let response = pm.response;\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> \r",
							"{\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Test that the correct comment data is returned\",()=> \r",
							"{\r",
							"  console.log(\"comment\", comment);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(comment).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"if(testData.comments[testData.counter])\r",
							"{\r",
							"    pm.execution.setNextRequest(\"Get comments after change\");\r",
							"}\r",
							"else \r",
							"{\r",
							"    console.log(\"All comments have been read correctly after the change.\");\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create categories as User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// pm variables have a scope of one request\r",
							"// setting two variables used in the body\r",
							"pm.variables.set(\"name\", category.name);\r",
							"pm.variables.set(\"description\", category.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data (if any)\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// If there are more categories - then \"loop\" through them using setNextRequest\r",
							"if (testData.categories[testData.counter]) {\r",
							"    pm.execution.setNextRequest(\"Create categories as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All categories have been processed correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Telefoner\",\r\n    \"description\": \"Olika mobiltelefoner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get categories as User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", category.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that the REST-api returns the sama data",
							"// as our test data for the category",
							"pm.test(\"Test that the correct category data is returned\", ()=> {",
							"  console.log(\"category\", category);",
							"  console.log(\"responseData\", responseData);",
							"  pm.expect(category).to.deep.equal(responseData); ",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more categories - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.categories[testData.counter]){",
							"    pm.execution.setNextRequest(\"Get categories as User\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All categories have been read correctly.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete categories as User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", category.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data (if any)\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// If there are more categories - then \"loop\" through them using setNextRequest\r",
							"if (testData.categories[testData.counter]) {\r",
							"    pm.execution.setNextRequest(\"Delete categories as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No categories have been deleted.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Telefoner\",\r\n    \"description\": \"Olika mobiltelefoner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create products as User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let product = testData.products[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data (if any)",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 405 code (forbidden request) back",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {",
							"    pm.expect(response.code).to.equal(405);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\", testData);",
							"",
							"// If there are more products - then \"loop\" through them using setNextRequest",
							"if (testData.products[testData.counter]) {",
							"    pm.execution.setNextRequest(\"Create products as User\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All products have been processed correctly.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\", testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let product = testData.products[testData.counter];",
							"",
							"// pm variables have a scope of one request",
							"// setting four variables used in the body",
							"pm.variables.set(\"name\", product.name);",
							"pm.variables.set(\"description\", product.description);",
							"pm.variables.set(\"price\", product.price);",
							"pm.variables.set(\"categoryId\", product.categoryId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": {{price}},\n    \"categoryId\": {{categoryId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/products",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products as User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> \r",
							"{\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the product\r",
							"pm.test(\"Test that the correct product data is returned\", ()=> \r",
							"{\r",
							"  console.log(\"product\", product);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(product).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.products[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get products as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All products have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change products as User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Check if rowsAffected exists in the response data\r",
							"if (responseData.hasOwnProperty('rowsAffected')) {\r",
							"    pm.test(\"Expect rowsAffected to equal 0\", () => {\r",
							"        pm.expect(responseData.rowsAffected).to.equal(0);\r",
							"    });\r",
							"} else {\r",
							"    console.warn(\"rowsAffected is not present in the response data\");\r",
							"}\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more producrt - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.products[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Change products as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No products have been changed.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Change the description and save to collectionVariables\r",
							"product.description += \"TEST.\";\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); \r",
							"\r",
							"// Set a pm variable to description (it is used in the request body)\r",
							"pm.variables.set(\"description\", product.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete products as User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data (if any)\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// If there are more productss - then \"loop\" through them using setNextRequest\r",
							"if (testData.products[testData.counter]) {\r",
							"    pm.execution.setNextRequest(\"Delete products as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No products have been deleted.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Telefoner\",\r\n    \"description\": \"Olika mobiltelefoner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comments as user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"",
							"// Get the current comment",
							"let commentList = testData.comments[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get an insert id back",
							"// also add the id in our test data (for future tests)",
							"pm.test(\"We should get an insertId back\", () => {",
							"    pm.expect(responseData.insertId).to.be.a('number');",
							"    // Add the property id to the comment with the",
							"    // id received from the REST-api",
							"    commentList.id = responseData.insertId;",
							"    // Log",
							"    console.log(\"The comment has been created\", commentList);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"// (also including the id we set in the second test)",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more comments - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.comments[testData.counter]){",
							"    pm.execution.setNextRequest(\"Create comments\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All comments have been created.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let commentList = testData.comments[testData.counter];",
							"",
							"// pm variables have a scope of one request",
							"// setting four variables used in the body",
							"pm.variables.set(\"comment\", commentList.comment);",
							"pm.variables.set(\"userId\", commentList.userId);",
							"pm.variables.set(\"productId\", commentList.productId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": {{price}},\n    \"categoryId\": {{categoryId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments as User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", commentList.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the product\r",
							"pm.test(\"Test that the correct comment data is returned\", ()=> {\r",
							"  console.log(\"comment\", commentList);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(commentList).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.comments[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get commentList as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All comments have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change comments as User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Change the description and save to collectionVariables\r",
							"category.description += \" Some extra text in the description.\";\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", category.id); \r",
							"\r",
							"// Set a pm variable to description (it is used in the request body)\r",
							"pm.variables.set(\"description\", category.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Check if rowsAffected exists in the response data\r",
							"if (responseData.hasOwnProperty('rowsAffected')) {\r",
							"    pm.test(\"Expect rowsAffected to equal 0\", () => {\r",
							"        pm.expect(responseData.rowsAffected).to.equal(0);\r",
							"    });\r",
							"} else {\r",
							"    console.warn(\"rowsAffected is not present in the response data\");\r",
							"}\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more comments - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.comments[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Change comments as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No comments have been changed.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comments as User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data (if any)\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// If there are more productss - then \"loop\" through them using setNextRequest\r",
							"if (testData.comments[testData.counter]) {\r",
							"    pm.execution.setNextRequest(\"Delete comments as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No comments have been deleted.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Telefoner\",\r\n    \"description\": \"Olika mobiltelefoner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout as User",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login as Visitor",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"olle@nodehill.com\",\r\n    \"password\": \"12345678\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create categories as Visitor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// pm variables have a scope of one request\r",
							"// setting two variables used in the body\r",
							"pm.variables.set(\"name\", category.name);\r",
							"pm.variables.set(\"description\", category.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data (if any)\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// If there are more categories - then \"loop\" through them using setNextRequest\r",
							"if (testData.categories[testData.counter]) {\r",
							"    pm.execution.setNextRequest(\"Create categories as Visitor\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All categories have been processed correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Telefoner\",\r\n    \"description\": \"Olika mobiltelefoner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get categories as Visitor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", category.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that the REST-api returns the sama data",
							"// as our test data for the category",
							"pm.test(\"Test that the correct category data is returned\", ()=> {",
							"  console.log(\"category\", category);",
							"  console.log(\"responseData\", responseData);",
							"  pm.expect(category).to.deep.equal(responseData); ",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more categories - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.categories[testData.counter]){",
							"    pm.execution.setNextRequest(\"Get categories as Visitor\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All categories have been read correctly.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change categories as Visitor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Change the description and save to collectionVariables\r",
							"category.description += \" Some extra text in the description.\";\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", category.id); \r",
							"\r",
							"// Set a pm variable to description (it is used in the request body)\r",
							"pm.variables.set(\"description\", category.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Check if rowsAffected exists in the response data\r",
							"if (responseData.hasOwnProperty('rowsAffected')) {\r",
							"    pm.test(\"Expect rowsAffected to equal 0\", () => {\r",
							"        pm.expect(responseData.rowsAffected).to.equal(0);\r",
							"    });\r",
							"} else {\r",
							"    console.warn(\"rowsAffected is not present in the response data\");\r",
							"}\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more categories - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.categories[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Change categories as Visitor\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No category-decriptions have been changed.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete categories as Visitor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", category.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data (if any)\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// If there are more categories - then \"loop\" through them using setNextRequest\r",
							"if (testData.categories[testData.counter]) {\r",
							"    pm.execution.setNextRequest(\"Delete categories as Visitor\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No categories have been deleted.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Telefoner\",\r\n    \"description\": \"Olika mobiltelefoner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create products as Visitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let product = testData.products[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data (if any)",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 405 code (forbidden request) back",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {",
							"    pm.expect(response.code).to.equal(405);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\", testData);",
							"",
							"// If there are more products - then \"loop\" through them using setNextRequest",
							"if (testData.products[testData.counter]) {",
							"    pm.execution.setNextRequest(\"Create products as Visitor\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All products have been processed correctly.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\", testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let product = testData.products[testData.counter];",
							"",
							"// pm variables have a scope of one request",
							"// setting four variables used in the body",
							"pm.variables.set(\"name\", product.name);",
							"pm.variables.set(\"description\", product.description);",
							"pm.variables.set(\"price\", product.price);",
							"pm.variables.set(\"categoryId\", product.categoryId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": {{price}},\n    \"categoryId\": {{categoryId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/products",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products as Visitor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> \r",
							"{\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the product\r",
							"pm.test(\"Test that the correct product data is returned\", ()=> \r",
							"{\r",
							"  console.log(\"product\", product);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(product).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.products[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get products as Visitor\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All products have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change products as Visitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Check if rowsAffected exists in the response data\r",
							"if (responseData.hasOwnProperty('rowsAffected')) {\r",
							"    pm.test(\"Expect rowsAffected to equal 0\", () => {\r",
							"        pm.expect(responseData.rowsAffected).to.equal(0);\r",
							"    });\r",
							"} else {\r",
							"    console.warn(\"rowsAffected is not present in the response data\");\r",
							"}\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more producrt - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.products[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Change products as Visitor\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No products have been changed.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Change the description and save to collectionVariables\r",
							"product.description += \"TEST.\";\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); \r",
							"\r",
							"// Set a pm variable to description (it is used in the request body)\r",
							"pm.variables.set(\"description\", product.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete products as Visitor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data (if any)\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// If there are more productss - then \"loop\" through them using setNextRequest\r",
							"if (testData.products[testData.counter]) {\r",
							"    pm.execution.setNextRequest(\"Delete products as Visitor\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No products have been deleted.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Telefoner\",\r\n    \"description\": \"Olika mobiltelefoner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comments as Visitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let commentList = testData.comments[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data (if any)",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 500 code server error back",
							"pm.test(\"We should get a Internal Server Error (code 500) back\", ()=> {",
							"    pm.expect(response.code).to.equal(500);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\", testData);",
							"",
							"// If there are more comments - then \"loop\" through them using setNextRequest",
							"if (testData.comments[testData.counter]) {",
							"    pm.execution.setNextRequest(\"Create comments as User\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All comments have been processed correctly.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\", testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"",
							"// Get the current commentss",
							"let commentList = testData.comments[testData.counter];",
							"",
							"// pm variables have a scope of one request",
							"// setting four variables used in the body",
							"pm.variables.set(\"comment\", commentList.comment);",
							"pm.variables.set(\"userId\", commentList.userId);",
							"pm.variables.set(\"productId\", commentList.productId);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": {{price}},\n    \"categoryId\": {{categoryId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments as Visitor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", commentList.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the product\r",
							"pm.test(\"Test that the correct comment data is returned\", ()=> {\r",
							"  console.log(\"comment\", commentList);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(commentList).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.comments[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get commentList as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All comments have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change comments as Visitor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Change the description and save to collectionVariables\r",
							"category.description += \" Some extra text in the description.\";\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", category.id); \r",
							"\r",
							"// Set a pm variable to description (it is used in the request body)\r",
							"pm.variables.set(\"description\", category.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Check if rowsAffected exists in the response data\r",
							"if (responseData.hasOwnProperty('rowsAffected')) {\r",
							"    pm.test(\"Expect rowsAffected to equal 0\", () => {\r",
							"        pm.expect(responseData.rowsAffected).to.equal(0);\r",
							"    });\r",
							"} else {\r",
							"    console.warn(\"rowsAffected is not present in the response data\");\r",
							"}\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more comments - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.comments[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Change comments as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No comments have been changed.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comments as Visitor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let commentList = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data (if any)\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (forbidden request) back\r",
							"pm.test(\"We should get a forbidden (code 405) back\", ()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// If there are more productss - then \"loop\" through them using setNextRequest\r",
							"if (testData.comments[testData.counter]) {\r",
							"    pm.execution.setNextRequest(\"Delete comments as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"No comments have been deleted.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Telefoner\",\r\n    \"description\": \"Olika mobiltelefoner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout as Visitor",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "data",
			"value": ""
		},
		{
			"key": "testData",
			"value": ""
		}
	]
}